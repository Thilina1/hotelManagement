
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the restaurant staff management system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity. This corresponds to the Firebase Firestore document ID.",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "The user's name. Must be unique across all users."
        },
        "birthday": {
          "type": "string",
          "description": "The user's birthday.",
          "format": "date"
        },
        "role": {
          "type": "string",
          "description": "The user's role within the system.  Allowed values: 'admin', 'waiter', 'payment'.",
          "enum": ["admin", "waiter", "payment"]
        },
        "createdAt": {
            "type": "string",
            "description": "Timestamp when the user was created.",
            "format": "date-time"
        },
        "updatedAt": {
            "type": "string",
            "description": "Timestamp when the user was last updated.",
            "format": "date-time"
        },
        "createdBy": {
            "type": "string",
            "description": "UID of the user who created this user."
        },
        "updatedBy": {
            "type": "string",
            "description": "UID of the user who last updated this user."
        }
      },
      "required": [
        "name",
        "birthday",
        "role",
        "createdAt",
        "createdBy",
        "updatedAt",
        "updatedBy"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. The document ID is the Firebase Auth UID.  Only the authenticated user (or an admin) can access their own document.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support a restaurant staff management system with role-based access control.  It emphasizes simplicity and security, especially concerning user data.\n\nThe core design revolves around storing user data in a dedicated collection, `/users/{userId}`, with `{userId}` corresponding to the Firebase Authentication `uid`. This structure ensures path-based ownership, making security rules straightforward and efficient. No denormalization is needed as only the authenticated user (or an admin via separate, potentially centralized admin data) should have access to user profiles, supporting the required QAPs through structural segregation.\n\nThis approach avoids `get()` calls in security rules, promoting Authorization Independence. It also inherently supports listing users securely, as only an admin (determined by a separate `/roles_admin/{uid}` document) would have list access to the `/users` collection, while regular users can only access their own document at `/users/{uid}`. Roles are explicitly defined in the user document, allowing for content-based authorization checks within the security rules (e.g., `request.resource.data.role == 'admin'`).\n\nTo support the 'no duplicate' constraint on the 'name' field, consider using a Cloud Function triggered on document creation or update. This function can query the collection to check for existing names and reject the write if a duplicate is found, ensuring data integrity."
  }
}
