/**
 * @fileOverview Firestore Security Rules for a restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * supplemented by role-based access control for administrative functions.
 * Users can only access their own profile data, while administrative
 * users have broader access based on their assigned roles.
 *
 * Data Structure:
 * User profiles are stored under `/users/{userId}`, where `{userId}` corresponds to the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing all users is disallowed for non-admin users.
 *
 * Denormalization for Authorization:
 *  - The user's role ('admin', 'waiter', 'payment') is stored directly within their user document. This enables role-based access control without needing separate database reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual user documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching UID.
     * @deny (get, create, update, delete) User with non-matching UID.
     * @principle Enforces document ownership and validates user ID consistency.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      // Allows a user to read their own profile
      allow get: if isSignedIn() && isOwner(userId);

      // Users are not allowed to list all users.
      allow list: if false;

      // Allows a user to create their own profile, enforcing that the userId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allows a user to update their own profile, enforcing that the userId in the data matches the authenticated user's UID.
      // Also ensures the user exists before allowing the update.  This prevents updates to non-existent documents.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allows a user to delete their own profile if the user exists.  The auth id must match the resource id
      allow delete: if isExistingOwner(userId);
    }
  }
}