rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document at /users/user123.
     * @allow (get) User with UID 'user123' can read their own profile document at /users/user123.
     * @allow (update) User with UID 'user123' can update their own profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their own profile document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile document at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile document at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile document at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows read and write access to all room documents.
     * @path /rooms/{roomId}
     * @allow (get) Any user can read any room document.
     * @allow (create) Any user can create a room document.
     * @allow (update) Any user can update any room document.
     * @allow (delete) Any user can delete any room document.
     * @principle Allows open access to room data for prototyping.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows read and write access to all booking documents.
     * @path /bookings/{bookingId}
     * @allow (get) Any user can read any booking document.
     * @allow (create) Any user can create a booking document.
     * @allow (update) Any user can update any booking document.
     * @allow (delete) Any user can delete any booking document.
     * @principle Allows open access to booking data for prototyping.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows read and write access to all menu item documents.
     * @path /menuItems/{menuItemId}
     * @allow (get) Any user can read any menu item document.
     * @allow (create) Any user can create a menu item document.
     * @allow (update) Any user can update any menu item document.
     * @allow (delete) Any user can delete any menu item document.
     * @principle Allows open access to menu item data for prototyping.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows read and write access to all table documents.
     * @path /tables/{tableId}
     * @allow (get) Any user can read any table document.
     * @allow (create) Any user can create a table document.
     * @allow (update) Any user can update any table document.
     * @allow (delete) Any user can delete any table document.
     * @principle Allows open access to table data for prototyping.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows read and write access to all order documents.
     * @path /orders/{orderId}
     * @allow (get) Any user can read any order document.
     * @allow (create) Any user can create an order document.
     * @allow (update) Any user can update any order document.
     * @allow (delete) Any user can delete any order document.
     * @principle Allows open access to order data for prototyping.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows read and write access to all order item documents within an order.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow (get) Any user can read any order item document.
     * @allow (create) Any user can create an order item document.
     * @allow (update) Any user can update any order item document.
     * @allow (delete) Any user can delete any order item document.
     * @principle Allows open access to order item data for prototyping.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }

  // Helper function to determine if the current user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the current user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
      return request.auth != null;
  }
}