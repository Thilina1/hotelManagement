/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * role-based access control for Rooms, Bookings, and MenuItems, and prevents
 * unauthorized data access or modification. It leverages Firebase Authentication
 * to verify user identity and ensure that users can only access their own data
 * unless they have administrative privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  `userId` MUST match the Firebase Auth UID.
 * - /rooms/{roomId}: Stores hotel room information.
 * - /bookings/{bookingId}: Stores booking information.
 * - /menuItems/{menuItemId}: Stores menu item information, categorized by restaurant section.
 *
 * Key Security Decisions:
 * - User listing is implicitly restricted. Only a user with admin role could list all users.
 * - Unauthenticated access is forbidden across the board.
 * - The rules do not validate the data itself outside of authorization. This is to allow for rapid iteration on data shapes.
 *
 * Denormalization for Authorization:
 * This ruleset avoids `get()` calls by relying on data within the documents themselves
 * to make authorization decisions, such as checking user roles directly in the
 * `/users/{userId}` document or checking ownership of /menuItems/{menuItemId}.
 *
 * Structural Segregation:
 * The system uses separate collections for user profiles and public data (rooms, bookings, menu items),
 * allowing for different security policies for each.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user
     *              can access their own profile, or a user with admin role can access any profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user themselves.
     * @deny (get, create, update, delete) if the request is made by a different user and the user doesn't have admin role.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to hotel room data.
     * @path /rooms/{roomId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only users with 'admin' role can modify room data.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to booking data.
     * @path /bookings/{bookingId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Only users with 'admin' role can modify booking data.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /bookings/{bookingId} {
          function isSignedIn() {
            return request.auth != null;
          }

          function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
          }

          allow get, list: if true;
          allow create: if isAdmin();
          allow update: if isAdmin() && resource != null;
          allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Controls access to menu item data.
      * @path /menuItems/{menuItemId}
      * @allow (get, list) Public read access.
      * @allow (create, update, delete) Only users with 'admin' role can modify menu item data.
      * @deny (create, update, delete) if the user is not an admin.
      * @principle Role-based access control.
      */
    match /menuItems/{menuItemId} {
          function isSignedIn() {
            return request.auth != null;
          }

          function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
          }

          allow get, list: if true;
          allow create: if isAdmin();
          allow update: if isAdmin() && resource != null;
          allow delete: if isAdmin() && resource != null;
    }
  }
}