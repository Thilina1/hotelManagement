/**
 * @file Firestore Security Rules for Restaurant Staff Management System
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and defaults to denying all access to other collections,
 * pending a more specific security review. This provides a highly secure starting point.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` is the Firebase Auth UID, ensuring path-based ownership.
 * - Other collections (rooms, bookings, menuItems, tables, orders, orderItems, bills) exist at the top level.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the owner-only access to the `/users/{userId}` collection.
 * - Other collections have all access explicitly denied for now. The rules will be updated later
 *   to implement the correct access control for those collections, after further clarification of
 *   the application's security requirements and access patterns.
 * - The default security posture for ambiguous relationships is strict denial.
 *
 * Denormalization for Authorization:
 * - Not used in the current rules, but could be implemented in future rules for other collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can access their own document.
     * @path /users/{userId}
     * @allow (get) User with UID 'user_abc' can read their own profile (e.g., /users/user_abc).
     * @allow (create) User with UID 'user_abc' can create their own profile (e.g., /users/user_abc) if the document id matches their user id.
     * @allow (update) User with UID 'user_abc' can update their own profile (e.g., /users/user_abc).
     * @allow (delete) User with UID 'user_abc' can delete their own profile (e.g., /users/user_abc).
     * @deny (get) User with UID 'user_xyz' cannot read user profile with ID 'user_abc' (e.g., /users/user_abc).
     * @deny (create) User with UID 'user_xyz' cannot create user profile with ID 'user_abc' (e.g., /users/user_abc).
     * @deny (update) User with UID 'user_xyz' cannot update user profile with ID 'user_abc' (e.g., /users/user_abc).
     * @deny (delete) User with UID 'user_xyz' cannot delete user profile with ID 'user_abc' (e.g., /users/user_abc).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Explicitly denies all access to the `/rooms` collection.
     * @path /rooms/{roomId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/rooms` collection.
     * @principle Secures the `/rooms` collection by denying all access as a default security posture.
     */
    match /rooms/{roomId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Explicitly denies all access to the `/bookings` collection.
     * @path /bookings/{bookingId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/bookings` collection.
     * @principle Secures the `/bookings` collection by denying all access as a default security posture.
     */
    match /bookings/{bookingId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Explicitly denies all access to the `/menuItems` collection.
     * @path /menuItems/{menuItemId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/menuItems` collection.
     * @principle Secures the `/menuItems` collection by denying all access as a default security posture.
     */
    match /menuItems/{menuItemId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Explicitly denies all access to the `/tables` collection.
     * @path /tables/{tableId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/tables` collection.
     * @principle Secures the `/tables` collection by denying all access as a default security posture.
     */
    match /tables/{tableId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Explicitly denies all access to the `/orders` collection.
     * @path /orders/{orderId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/orders` collection.
     * @principle Secures the `/orders` collection by denying all access as a default security posture.
     */
    match /orders/{orderId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Explicitly denies all access to the `/orders/{orderId}/items` subcollection.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/orders/{orderId}/items` subcollection.
     * @principle Secures the `/orders/{orderId}/items` subcollection by denying all access as a default security posture.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Explicitly denies all access to the `/bills` collection.
     * @path /bills/{billId}
     * @allow None. All operations are denied.
     * @deny Any operation on any document in the `/bills` collection.
     * @principle Secures the `/bills` collection by denying all access as a default security posture.
     */
    match /bills/{billId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}