rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID userId can access their own profile.
     * @allow (create) User with UID userId can create their own profile.
     * @deny (get, update, delete) User with UID otherUserId cannot access user with UID userId's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to room details.
     * @path /rooms/{roomId}
     * @allow (get, list) Any user can read room details.
     * @deny (create, update, delete) Only authenticated users can manage rooms. // TODO: Add validation once an ownership field exists in the schema.
     * @principle Allows public read access with restricted writes.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to booking information.
     * @path /bookings/{bookingId}
     * @allow (get, list) Any user can read booking information.
     * @deny (create, update, delete) Only authenticated users can manage bookings. // TODO: Add validation once an ownership field exists in the schema.
     * @principle Allows public read access with restricted writes.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to menu item details.
     * @path /menuItems/{menuItemId}
     * @allow (get, list) Any user can read menu item details.
     * @deny (create, update, delete) Only authenticated users can manage menu items. // TODO: Add validation once an ownership field exists in the schema.
     * @principle Allows public read access with restricted writes.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to table information.
     * @path /tables/{tableId}
     * @allow (get, list) Any user can read table information.
     * @deny (create, update, delete) Only authenticated users can manage tables. // TODO: Add validation once an ownership field exists in the schema.
     * @principle Allows public read access with restricted writes.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to order information.
     * @path /orders/{orderId}
     * @allow (get, list) Any user can read order information.
     * @deny (create, update, delete) Only authenticated users can manage orders. // TODO: Add validation once an ownership field exists in the schema.
     * @principle Allows public read access with restricted writes.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to order item data within a specific order.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow (get, list) Any user can read order item data.
     * @deny (create, update, delete) Only authenticated users can manage order items. // TODO: Add validation once an ownership field exists in the schema.
     * @principle Allows public read access with restricted writes.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}