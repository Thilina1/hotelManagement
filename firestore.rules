/**
 * @file Firestore Security Rules for Restaurant Staff Management System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles,
 *                  where each authenticated user can only access their own profile data.
 *                  Administrative privileges are not currently handled in this ruleset.
 *
 * @data_structure User data is stored under `/users/{userId}`, where `{userId}` corresponds
 *                 directly to the Firebase Auth UID. This structure facilitates path-based
 *                 authorization, ensuring efficient and secure access control.
 *
 * @key_security_decisions
 *   - User listing is implicitly denied to regular users due to the strict ownership model. Only a specifically authorized admin would be able to list users (not yet implemented here).
 *   - No external data lookups (`get()` calls) are used within the rules to maintain performance and security.
 *
 * @denormalization_for_authorization Not applicable in the current version as admin roles are not incorporated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to individual user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document at /users/user_abc.
     * @allow (get) User with UID 'user_abc' can read their own profile document at /users/user_abc.
     * @allow (update) User with UID 'user_abc' can update their own profile document at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their own profile document at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document at /users/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot read the profile document at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the profile document at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile document at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isSignedIn() checks if the user is authenticated.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not allowed for non-admins
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in (i.e., authenticated).
     * @return True if request.auth is not null; false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the authenticated user's UID matches the provided userId; false otherwise.
     * @example isOwner('user123') returns true if request.auth.uid is 'user123'.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document, ensuring it exists.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the authenticated user's UID matches the provided userId AND the resource exists; false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}