/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles
 * and role-based access control for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /rooms/{roomId}: Stores room information, with create/update/delete access open.
 * - /bookings/{bookingId}: Stores booking data, with create/update/delete access open.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing of user documents is denied to all users.
 * - The prototype does not enforce data validation beyond authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @allow (update) User with matching UID can update their own profile.
     * @allow (delete) User with matching UID can delete their own profile.
     * @deny (get) User tries to read another user's profile.
     * @deny (create) User tries to create a profile with a mismatched UID.
     * @deny (update) User tries to update another user's profile.
     * @deny (delete) User tries to delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource != null;
      }

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Only the owner can list their own user document (this is effectively disabled).
      allow list: if false;

      // Allow a user to create their own profile, enforcing that the UID in the path matches the authenticated user's UID.
      allow create: if isOwner(userId);

      // Allow a user to update their own profile, enforcing immutability of the 'id' field.
      allow update: if isExistingOwner(userId);

      // Allow a user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to room documents. Open access for all operations.
     * @path /rooms/{roomId}
     * @allow (get) Any user can read room details.
     * @allow (list) Any user can list rooms.
     * @allow (create) Any user can create a new room document.
     * @allow (update) Any user can update an existing room document.
     * @allow (delete) Any user can delete a room document.
     * @principle Public read access, open write access for prototyping.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to booking documents. Open access for all operations.
     * @path /bookings/{bookingId}
     * @allow (get) Any user can read booking details.
     * @allow (list) Any user can list bookings.
     * @allow (create) Any user can create a new booking document.
     * @allow (update) Any user can update an existing booking document.
     * @allow (delete) Any user can delete a booking document.
     * @principle Public read access, open write access for prototyping.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  // Helper function to check if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}