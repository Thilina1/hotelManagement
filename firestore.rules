/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and public read access for other collections (rooms, bookings, menu items, tables),
 * with write access restricted.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}, where {userId} matches the Firebase Auth UID.
 * - Rooms are stored under /rooms/{roomId}.
 * - Bookings are stored under /bookings/{bookingId}.
 * - Menu items are stored under /menuItems/{menuItemId}.
 * - Tables are stored under /tables/{tableId}.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing users is denied to prevent information disclosure.
 * - Other collections are publicly readable, but writes are restricted.
 * - No complex data validation is performed in these rules (prototyping mode).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.  Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with UID "user123" can read/write document "user123".
     * @deny (get, create, update, delete) - User with UID "user123" cannot read/write document "user456".
     * @principle Enforces document ownership; users can only access their own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      // Allow create if the user is creating their own document, enforcing UID match.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // On update, enforce that the userId field cannot be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the owner can delete their profile, and only if it exists.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to rooms, but restrict writes.
     * @path /rooms/{roomId}
     * @allow (get, list) - Any user can read room information.
     * @deny (create, update, delete) - No user can create, update, or delete room information.
     * @principle Public read, restricted write access for room data.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read access to bookings, but restrict writes.
     * @path /bookings/{bookingId}
     * @allow (get, list) - Any user can read booking information.
     * @deny (create, update, delete) - No user can create, update, or delete booking information.
     * @principle Public read, restricted write access for booking data.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read access to menu items, but restrict writes.
     * @path /menuItems/{menuItemId}
     * @allow (get, list) - Any user can read menu item information.
     * @deny (create, update, delete) - No user can create, update, or delete menu item information.
     * @principle Public read, restricted write access for menu item data.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read access to tables, but restrict writes.
     * @path /tables/{tableId}
     * @allow (get, list) - Any user can read table information.
     * @deny (create, update, delete) - No user can create, update, or delete table information.
     * @principle Public read, restricted write access for table data.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}