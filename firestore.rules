/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users can only
 * access their own profile data and administrators have broader access.
 *
 * Data Structure:
 * User profiles are stored in `/users/{userId}`, where `{userId}` corresponds to the
 * Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - Users can only create their own profile with a matching UID.
 * - Updates and deletes are restricted to the user themselves or an admin.
 * - Listing users is disallowed for non-admins.
 * - The rules are designed for Authorization Independence to avoid complex queries.
 *
 * Denormalization for Authorization:
 * No denormalization is used.  The user's role is stored within the user's document
 * to avoid additional reads for role-based checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) Authenticated user with matching UID can access and modify their profile.
     * @deny (create) User tries to create a profile with a mismatched UID.
     * @deny (list) Non-admins cannot list all users.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isCreatingOwnProfile(userId) {
        return request.auth.uid == userId;
      }

      // Allows a user to create their profile IF the UID matches the document ID
      allow create: if isSignedIn() && isCreatingOwnProfile(userId);

      // Allows a user to read their own profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allows a user to update their profile IF they are the owner
      allow update: if isSignedIn() && isOwner(userId);

      // Allows a user to delete their profile IF they are the owner and the resource exists.
      allow delete: if isSignedIn() && isOwner(userId);

      // Listing users is not permitted
      allow list: if false;
    }
  }
}