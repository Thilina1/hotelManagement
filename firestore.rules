/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles
 * located under `/users/{userId}`, where `{userId}` corresponds to the
 * Firebase Authentication `uid`. Other collections (`/rooms`, `/bookings`,
 * `/menuItems`, `/tables`, `/orders`) allow public read access but restrict
 * writes to authenticated users.  The `orders/{orderId}/items/{orderItemId}`
 * subcollection follows the same ownership as the parent `order`.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.  Access is limited to
 *   the authenticated user or potentially an admin role (not yet implemented).
 * - `/rooms/{roomId}`: Stores room information. Public read access, writes
 *   are authenticated only.
 * - `/bookings/{bookingId}`: Stores booking information. Public read access, writes
 *   are authenticated only.
 * - `/menuItems/{menuItemId}`: Stores menu item information. Public read access, writes
 *   are authenticated only.
 * - `/tables/{tableId}`: Stores table information. Public read access, writes
 *   are authenticated only.
 * - `/orders/{orderId}`: Stores order information. Public read access, writes
 *   are authenticated only.
 * - `/orders/{orderId}/items/{orderItemId}`: Stores order item information. Public read access, writes
 *   are authenticated only.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied because only admins (not yet implemented)
 *   would have list access to the `/users` collection. Regular users can only
 *   access their own document at `/users/{uid}`.
 * - The absence of an `ownerId` or `authorId` field in the `Room`, `Booking`,
 *   `MenuItem`, `Table`, and `Order` entities means the public-read,
 *   owner-write pattern cannot be fully implemented. Writes are restricted to
 *   authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile document at /users/user123.
     * @allow (get) - User with UID 'user123' reads their profile document at /users/user123.
     * @allow (update) - User with UID 'user123' updates their profile document at /users/user123.
     * @allow (delete) - User with UID 'user123' deletes their profile document at /users/user123.
     * @deny (create) - User with UID 'user123' attempts to create a profile document at /users/user456.
     * @deny (get) - User with UID 'user123' attempts to read a profile document at /users/user456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to room documents.  Allows public read access, restricts writes to authenticated users.
     * @path /rooms/{roomId}
     * @allow (get) - Any user can read a room document.
     * @allow (list) - Any user can list room documents.
     * @allow (create) - Authenticated user creates a room.
     * @deny (create) - Unauthenticated user attempts to create a room.
     * @principle Allows public read, restricts writes to authenticated users.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to booking documents.  Allows public read access, restricts writes to authenticated users.
     * @path /bookings/{bookingId}
     * @allow (get) - Any user can read a booking document.
     * @allow (list) - Any user can list booking documents.
     * @allow (create) - Authenticated user creates a booking.
     * @deny (create) - Unauthenticated user attempts to create a booking.
     * @principle Allows public read, restricts writes to authenticated users.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to menu item documents.  Allows public read access, restricts writes to authenticated users.
     * @path /menuItems/{menuItemId}
     * @allow (get) - Any user can read a menu item document.
     * @allow (list) - Any user can list menu item documents.
     * @allow (create) - Authenticated user creates a menu item.
     * @deny (create) - Unauthenticated user attempts to create a menu item.
     * @principle Allows public read, restricts writes to authenticated users.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to table documents.  Allows public read access, restricts writes to authenticated users.
     * @path /tables/{tableId}
     * @allow (get) - Any user can read a table document.
     * @allow (list) - Any user can list table documents.
     * @allow (create) - Authenticated user creates a table.
     * @deny (create) - Unauthenticated user attempts to create a table.
     * @principle Allows public read, restricts writes to authenticated users.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to order documents.  Allows public read access, restricts writes to authenticated users.
     * @path /orders/{orderId}
     * @allow (get) - Any user can read a order document.
     * @allow (list) - Any user can list order documents.
     * @allow (create) - Authenticated user creates a order.
     * @deny (create) - Unauthenticated user attempts to create a order.
     * @principle Allows public read, restricts writes to authenticated users.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to order item documents.  Allows public read access, restricts writes to authenticated users.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow (get) - Any user can read a order item document.
     * @allow (list) - Any user can list order item documents.
     * @allow (create) - Authenticated user creates a order item.
     * @deny (create) - Unauthenticated user attempts to create a order item.
     * @principle Allows public read, restricts writes to authenticated users.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the userId
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the existing user is the owner of the document based on the userId
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}