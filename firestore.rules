/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * supplemented by role-based access control for administrative functions.
 * Users can only access their own profile data, while administrative
 * users have broader access based on their assigned roles.
 *
 * Data Structure:
 * User profiles are stored in the `/users/{userId}` collection, where
 * `{userId}` corresponds to the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - Users can only create their own user document (self-registration).
 * - Users can only read, update, or delete their own user document.
 * - Listing the entire `/users` collection is denied to prevent unauthorized data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /users/{userId} collection. Only the authenticated user can access their own document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - User tries to create a profile with an ID that doesn't match their auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if isSignedIn()
                   && isOwner(userId)
                   && request.resource.data.id == userId;

      // Allow a user to get their own profile if the userId matches their auth UID.
      allow get: if isSignedIn()
                  && isOwner(userId);

      // Allow a user to update their own profile if the userId matches their auth UID and the document exists. Enforce immutability of the id.
      allow update: if isSignedIn()
                     && isExistingOwner(userId)
                     && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile if the userId matches their auth UID and the document exists.
      allow delete: if isSignedIn()
                     && isExistingOwner(userId);

      // Prevent listing of all users.
      allow list: if false;
    }
  }
}