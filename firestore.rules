/**
 * @file Firebase Security Rules for a Restaurant Staff Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 *  - User profiles are stored under `/users/{userId}`, accessible only to the authenticated user or an admin.
 *  - Other collections (`/rooms`, `/menuItems`, `/tables`) are accessible to all authenticated users.
 *
 * Data Structure:
 *  - `/users/{userId}`: Stores user profile information, where `{userId}` is the Firebase Auth UID.
 *  - `/rooms/{roomId}`: Stores room details.
 *  - `/menuItems/{menuItemId}`: Stores menu items.
 *  - `/tables/{tableId}`: Stores table information.
 *
 * Key Security Decisions:
 *  - Users can only manage their own profiles.
 *  - Listing of users is implicitly denied to regular users. Only admins could potentially list all users (but admin role is not implemented as it's out of scope in the current implementation).
 *  - All authenticated users can perform CRUD operations on rooms, menu items and tables.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is signed in and their UID matches the document ID.
     * @allow (create) if the user is signed in and their UID matches the document ID.
     * @deny (get, update, delete) if the user is not signed in or their UID does not match the document ID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Read rules:
      allow get: if isOwner(userId);
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Write rules:
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    /**
     * @description Allows all authenticated users to perform CRUD on rooms.
     * @path /rooms/{roomId}
     * @allow (create, get, update, delete, list) if the user is signed in.
     * @deny (create, get, update, delete, list) if the user is not signed in.
     * @principle Allows authenticated users access to rooms collection.
     */
    match /rooms/{roomId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow read, write: if isSignedIn();
    }
    
    /**
     * @description Allows all authenticated users to perform CRUD on menuItems.
     * @path /menuItems/{menuItemId}
     * @allow (create, get, update, delete, list) if the user is signed in.
     * @deny (create, get, update, delete, list) if the user is not signed in.
     * @principle Allows authenticated users access to menuItems collection.
     */
    match /menuItems/{menuItemId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow read, write: if isSignedIn();
    }
    
    /**
     * @description Allows all authenticated users to perform CRUD on tables.
     * @path /tables/{tableId}
     * @allow (create, get, update, delete, list) if the user is signed in.
     * @deny (create, get, update, delete, list) if the user is not signed in.
     * @principle Allows authenticated users access to tables collection.
     */
    match /tables/{tableId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function getRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }

      allow read: if isSignedIn() && (getRole() == 'waiter' || getRole() == 'admin');
      allow write: if isSignedIn() && getRole() == 'admin';
    }

    // Deny access to all other collections unless explicitly allowed
    match /{path=**} {
      allow read, write: if false;
    }
  }
}