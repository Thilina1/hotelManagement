/**
 * @file Firestore Security Rules for Restaurant Staff Management System
 *
 * Core Philosophy:
 * This ruleset prioritizes data privacy and restricts access based on user roles and ownership.
 * Users can only read their own data. No user can create, update, or delete users.
 * All other collections allow public reads.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user and potentially admins (not yet implemented).
 * - /rooms/{roomId}: Stores room information, publicly readable.
 * - /bookings/{bookingId}: Stores booking information, publicly readable.
 * - /menuItems/{menuItemId}: Stores menu item information, publicly readable.
 * - /tables/{tableId}: Stores table information, publicly readable.
 * - /orders/{orderId}: Stores order information, publicly readable.
 * - /orders/{orderId}/items/{orderItemId}: Stores order items, publicly readable.
 * - /bills/{billId}: Stores bill information, publicly readable.
 *
 * Key Security Decisions:
 * - Strict user ownership for user profiles.
 * - Public read access for all other collections, assuming no sensitive information is stored in them.
 * - No user listing is allowed except for admins (not yet implemented).
 *
 * Denormalization for Authorization:
 * N/A in this simplified model.
 *
 * Structural Segregation:
 * User profiles are stored in a dedicated collection (/users/{userId}) to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read their own profile. No user can create, update, or delete users.
     * @path /users/{userId}
     * @allow (get) User A with UID "userA" can read their profile at /users/userA.
     * @deny (get) User B with UID "userB" cannot read User A's profile at /users/userA.
     * @allow (list) User A with UID "userA" can list own profile at /users/userA.
     * @deny (create) User A with UID "userA" cannot create a user profile.
     * @deny (update) User A with UID "userA" cannot update a user profile.
     * @deny (delete) User A with UID "userA" cannot delete a user profile.
     * @principle Enforces strict user ownership for reads. No write allowed.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to rooms.
     * @path /rooms/{roomId}
     * @allow (get) Any user can read a room's information.
     * @allow (list) Any user can list rooms.
     * @deny (create) No user can create a room.
     * @deny (update) No user can update a room.
     * @deny (delete) No user can delete a room.
     * @principle Allows public reads with no writes.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bookings.
     * @path /bookings/{bookingId}
     * @allow (get) Any user can read a booking's information.
     * @allow (list) Any user can list bookings.
     * @deny (create) No user can create a booking.
     * @deny (update) No user can update a booking.
     * @deny (delete) No user can delete a booking.
     * @principle Allows public reads with no writes.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to menu items.
     * @path /menuItems/{menuItemId}
     * @allow (get) Any user can read a menu item's information.
     * @allow (list) Any user can list menu items.
     * @deny (create) No user can create a menu item.
     * @deny (update) No user can update a menu item.
     * @deny (delete) No user can delete a menu item.
     * @principle Allows public reads with no writes.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to tables.
     * @path /tables/{tableId}
     * @allow (get) Any user can read a table's information.
     * @allow (list) Any user can list tables.
     * @deny (create) No user can create a table.
     * @deny (update) No user can update a table.
     * @deny (delete) No user can delete a table.
     * @principle Allows public reads with no writes.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to orders.
     * @path /orders/{orderId}
     * @allow (get) Any user can read an order's information.
     * @allow (list) Any user can list orders.
     * @deny (create) No user can create an order.
     * @deny (update) No user can update an order.
     * @deny (delete) No user can delete an order.
     * @principle Allows public reads with no writes.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to order items.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow (get) Any user can read an order item's information.
     * @allow (list) Any user can list order items.
     * @deny (create) No user can create an order item.
     * @deny (update) No user can update an order item.
     * @deny (delete) No user can delete an order item.
     * @principle Allows public reads with no writes.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bills.
     * @path /bills/{billId}
     * @allow (get) Any user can read a bill's information.
     * @allow (list) Any user can list bills.
     * @deny (create) No user can create a bill.
     * @deny (update) No user can update a bill.
     * @deny (delete) No user can delete a bill.
     * @principle Allows public reads with no writes.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}