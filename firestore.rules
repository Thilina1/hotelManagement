/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and public read access for other collections (rooms, bookings, menuItems, tables, orders, orderItems),
 * with owner-only writes. This is prototyping mode, data shape is not enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with the document ID being the Firebase Auth UID.
 * - /rooms/{roomId}: Stores individual room details.
 * - /bookings/{bookingId}: Stores booking information.
 * - /menuItems/{menuItemId}: Stores menu item information.
 * - /tables/{tableId}: Stores restaurant table information.
 * - /orders/{orderId}: Stores customer orders.
 * - /orders/{orderId}/items/{orderItemId}: Stores items within a specific order.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied because the default rules only allow listing
 *   collections with explicitly granted permissions. Listing all users would require
 *   a separate admin role check, which is not part of the initial prototype.
 * - Other collections are publicly readable, but only owners can create, update, or delete documents.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` path parameter to the
 *   authenticated user's UID (`request.auth.uid`). No denormalization is needed
 *   as this is a direct path-based ownership model.
 *
 * Structural Segregation:
 * - User data is stored in a dedicated `/users/{userId}` collection, separate from
 *   other data, ensuring privacy and simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows the authenticated user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create, update, delete) if the user is not signed in or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to room details. Only owners can create, update, and delete documents.
     * @path /rooms/{roomId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /rooms/{roomId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to booking information. Only owners can create, update, and delete documents.
     * @path /bookings/{bookingId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to menu item information. Only owners can create, update, and delete documents.
     * @path /menuItems/{menuItemId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to restaurant table information. Only owners can create, update, and delete documents.
     * @path /tables/{tableId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /tables/{tableId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to customer orders. Only owners can create, update, and delete documents.
     * @path /orders/{orderId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /orders/{orderId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to items within a specific order. Only owners can create, update, and delete documents.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}