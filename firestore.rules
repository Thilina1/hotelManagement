/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * stored under `/users/{userId}`.  Only the authenticated user (or a system admin)
 * can access their own document.  Listing of all users is explicitly denied to regular users,
 * and must be managed through admin privileges which are assumed to be handled separately.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, where {userId} is the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - User listing is denied to regular users to prevent unauthorized data access.
 * - Only the authenticated user can create their own user document.
 * - Updates and deletes are restricted to the owning user.
 *
 * Denormalization for Authorization:
 *  - The user's ID is the document ID, allowing for simple `isOwner()` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User iySoGv7lZyOLs0xBCNNoB05LFry2 can create their own profile with matching UID.
     * @allow (get, update, delete) - User iySoGv7lZyOLs0xBCNNoB05LFry2 can get, update, and delete their profile with matching UID.
     * @deny (create, get, update, delete) - User anotherUser cannot create, get, update, or delete user iySoGv7lZyOLs0xBCNNoB05LFry2's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Check if the user is signed in
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Define helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}