/**
 * @fileoverview Firestore Security Rules for the restaurant staff management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and public read access for menu items and tables.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` is the Firebase Auth UID.
 * - Menu items, tables, orders, and bookings are stored in top-level collections (`/menuItems`, `/tables`, `/orders`, `/bookings`).
 * - Order items are stored as subcollections of orders (`/orders/{orderId}/items/{orderItemId}`).
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Menu items and tables are publicly readable, but writes are not secured yet (TODO).
 * - Listing all users is implicitly denied to non-admins via the user-ownership model.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * This ruleset does not require denormalization. User ownership is determined by the path `/users/{userId}`,
 * and roles are stored directly within the user document.  This simplifies authorization logic and avoids
 * expensive `get()` calls.
 *
 * Structural Segregation:
 * User profiles are stored in a dedicated, user-specific collection (`/users/{userId}`), ensuring that users can only
 * access their own data. Public data, like menu items and tables, is stored in top-level collections, allowing
 * for public read access without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the authenticated user can access their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, update, delete) User with UID 'qiNh1ZI8ifOUo4IRzxkQsLiUvWJ2' can access /users/qiNh1ZI8ifOUo4IRzxkQsLiUvWJ2.
     * @allow (create) User with UID 'qiNh1ZI8ifOUo4IRzxkQsLiUvWJ2' can create /users/qiNh1ZI8ifOUo4IRzxkQsLiUvWJ2.
     * @deny (get, update, delete) User with UID 'otherUserId' cannot access /users/qiNh1ZI8ifOUo4IRzxkQsLiUvWJ2.
     * @deny (create) User with UID 'otherUserId' cannot create /users/qiNh1ZI8ifOUo4IRzxkQsLiUvWJ2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allow public read access to menu items, but restrict writes.
     * @path /databases/{database}/documents/menuItems/{menuItemId}
     * @allow (get, list) Any user can read menu items.
     * @deny (create, update, delete) No user can create, update, or delete menu items (currently).
     * @principle Allows public read access with restricted writes.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allow public read access to tables, but restrict writes.
     * @path /databases/{database}/documents/tables/{tableId}
     * @allow (get, list) Any user can read table information.
     * @deny (create, update, delete) No user can create, update, or delete table information (currently).
     * @principle Allows public read access with restricted writes.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure access to bookings. Only authenticated users can create bookings.
     *  Reads, updates, and deletes are disallowed for prototyping.
     * @path /databases/{database}/documents/bookings/{bookingId}
     * @allow (create) Any authenticated user can create a booking.
     * @deny (get, list, update, delete) No user can read, list, update, or delete bookings (currently).
     * @principle Restricts read/write access for prototyping.
     */
    match /bookings/{bookingId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

     /**
      * @description Secure access to orders. Only authenticated users can create orders.
      *  Reads, updates, and deletes are disallowed for prototyping.
      * @path /databases/{database}/documents/orders/{orderId}
      * @allow (create) Any authenticated user can create an order.
      * @deny (get, list, update, delete) No user can read, list, update, or delete orders (currently).
      * @principle Restricts read/write access for prototyping.
      */
    match /orders/{orderId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure access to order items. Only authenticated users can create order items.
     *  Reads, updates, and deletes are disallowed for prototyping.
     * @path /databases/{database}/documents/orders/{orderId}/items/{orderItemId}
     * @allow (create) Any authenticated user can create an order item.
     * @deny (get, list, update, delete) No user can read, list, update, or delete order items (currently).
     * @principle Restricts read/write access for prototyping.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allow all read access when a user is signed in
     */
    function isSignedIn() {
        return request.auth != null;
    }
  }
}