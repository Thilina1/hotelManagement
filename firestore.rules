/**
 * @fileoverview Firestore Security Rules for Restaurant Staff Management System.
 *
 * Core Philosophy:
 * This ruleset implements a strict user-ownership model for user profiles
 * and public read access to restaurant data (rooms, bookings, menu items, tables, orders, and bills).
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` corresponds to the Firebase Auth UID.
 * - Restaurant data (rooms, bookings, menu items, tables, orders, and bills) are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is restricted to admins (not implemented in this ruleset, requires admin role management).
 * - Public read access is granted to restaurant data collections to allow easy browsing and display,
 *   but writes are generally restricted to authenticated users.
 * - The `bills` collection should have restricted access, to prevent unauthorized modification of bills
 *
 * Denormalization for Authorization:
 *  - Not explicitly used, but the `id` field of the User document is validated against the `{userId}` path
 *    to ensure ownership.
 *
 * Structural Segregation:
 *  - User profiles are stored in a separate collection (`/users/{userId}`) to keep private data isolated from public restaurant data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies that the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents modification of non-existent documents
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a different ID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /rooms/{roomId} collection.
     * @path /rooms/{roomId}
     * @allow (get, list) - Anyone can read room information.
     * @allow (create) - Authenticated users can create rooms.
     * @allow (update, delete) - Authenticated users can update/delete rooms.
     * @deny (create, update, delete) - Unauthenticated users cannot write rooms.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /bookings/{bookingId} collection.
     * @path /bookings/{bookingId}
     * @allow (get, list) - Anyone can read booking information.
     * @allow (create) - Authenticated users can create bookings.
     * @allow (update, delete) - Authenticated users can update/delete bookings.
     * @deny (create, update, delete) - Unauthenticated users cannot write bookings.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /menuItems/{menuItemId} collection.
     * @path /menuItems/{menuItemId}
     * @allow (get, list) - Anyone can read menu item information.
     * @allow (create) - Authenticated users can create menu items.
     * @allow (update, delete) - Authenticated users can update/delete menu items.
     * @deny (create, update, delete) - Unauthenticated users cannot write menu items.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /tables/{tableId} collection.
     * @path /tables/{tableId}
     * @allow (get, list) - Anyone can read table information.
     * @allow (create) - Authenticated users can create tables.
     * @allow (update, delete) - Authenticated users can update/delete tables.
     * @deny (create, update, delete) - Unauthenticated users cannot write tables.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get, list) - Anyone can read order information.
     * @allow (create) - Authenticated users can create orders.
     * @allow (update, delete) - Authenticated users can update/delete orders.
     * @deny (create, update, delete) - Unauthenticated users cannot write orders.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /orders/{orderId}/items/{orderItemId} subcollection.
     * @path /orders/{orderId}/items/{orderItemId}
     * @allow (get, list) - Anyone can read order item information.
     * @allow (create) - Authenticated users can create order items.
     * @allow (update, delete) - Authenticated users can update/delete order items.
     * @deny (create, update, delete) - Unauthenticated users cannot write order items.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /orders/{orderId}/items/{orderItemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the /bills/{billId} collection.
     * @path /bills/{billId}
     * @allow (get, list) - Anyone can read bill information.
     * @allow (create) - Authenticated users can create bills.
     * @allow (update, delete) - Authenticated users can update/delete bills.
     * @deny (create, update, delete) - Unauthenticated users cannot write bills.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}