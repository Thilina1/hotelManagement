/**
 * @fileoverview Firestore Security Rules for the Restaurant Staff Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and allows authenticated access to Rooms, MenuItems, and Tables.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`, where `{userId}` is the Firebase Auth UID.
 * - Room, MenuItem, Table and Order information are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing users is implicitly restricted as only admins (not covered in these basic rules) would have access to the entire `/users` collection.
 * - All authenticated users can read/write Rooms, MenuItems, and Tables.
 * - No data shape validation is performed in this prototyping phase.
 *
 * Denormalization for Authorization:
 *  - The user's role is stored directly within the user document itself to enable role-based access control without additional reads.
 *
 * Structural Segregation:
 *  - User profiles are stored in a dedicated user subcollection to enforce clear ownership and prevent accidental data exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the requested userId matches their auth UID.
     * @deny (get, create, update, delete) if the user is not signed in or the userId does not match their auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read and write Room data.
     * @path /rooms/{roomId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     * @principle Allows authenticated users to manage room information.
     */
    match /rooms/{roomId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write Booking data.
     * @path /bookings/{bookingId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     * @principle Allows authenticated users to manage booking information.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write MenuItem data.
     * @path /menuItems/{menuItemId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     * @principle Allows authenticated users to manage menu items.
     */
    match /menuItems/{menuItemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write Table data.
     * @path /tables/{tableId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     * @principle Allows authenticated users to manage table information.
     */
    match /tables/{tableId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
      /**
       * @description Allows any authenticated user to read and write order data.
       * @path /orders/{orderId}
       * @allow (get, list, create, update, delete) if the user is signed in.
       * @deny (get, list, create, update, delete) if the user is not signed in.
       * @principle Allows authenticated users to manage orders.
       */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
        /**
         * @description Allows any authenticated user to read and write order item data.
         * @path /orders/{orderId}/items/{orderItemId}
         * @allow (get, list, create, update, delete) if the user is signed in.
         * @deny (get, list, create, update, delete) if the user is not signed in.
         * @principle Allows authenticated users to manage order items.
         */
    match /orders/{orderId}/items/{orderItemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Fallback rule: Disallow all other reads and writes.
    match /{path=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}

/**
 * @description Checks if the user is signed in.
 * @return {boolean} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the requested user ID matches the authenticated user's ID.
 * @param {string} userId The user ID from the path.
 * @return {boolean} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return request.auth.uid == userId;
}

/**
 * @description Checks if the requested user ID matches the authenticated user's ID and the resource exists.
 * @param {string} userId The user ID from the path.
 * @return {boolean} True if the user is the existing owner, false otherwise.
 */
function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
}