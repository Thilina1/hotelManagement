/**
 * @file Firebase Security Rules for a Restaurant Staff Management System
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and role-based access control for other collections (rooms, bookings, menu items, tables).
 * Only authenticated users can access their profile, while different roles can access the other collections
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles, accessible only to the user themselves (or an admin).
 * - `/rooms/{roomId}`: Stores hotel room information.
 * - `/bookings/{bookingId}`: Stores booking information.
 * - `/menuItems/{menuItemId}`: Stores menu item information.
 * - `/tables/{tableId}`: Stores restaurant table information.
 *
 * Key Security Decisions:
 * - User listing is implicitly restricted; only admins (determined via a separate mechanism) could potentially list all users.
 * - Default security posture: strict ownership.
 *
 * Denormalization for Authorization:
 * - The `role` field within the `/users/{userId}` document is used for authorization decisions, avoiding external lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId && request.resource.data.id == userId
     * @deny (get) if request.auth == null
     * @deny (list) always. User listing is not permitted.
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != userId
     * @deny (delete) if request.auth.uid != userId
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages hotel room information.
     * @path /rooms/{roomId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false; // TODO: Add role-based authorization
     * @deny (create) always
     * @deny (update) always
     * @deny (delete) always
     * @principle Requires role-based authorization (e.g., admin-only) for writes.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization
    }

    /**
     * @description Manages booking information.
     * @path /bookings/{bookingId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false; // TODO: Add role-based authorization
     * @deny (create) always
     * @deny (update) always
     * @deny (delete) always
     * @principle Requires role-based authorization (e.g., admin-only) for writes.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization
    }

    /**
     * @description Manages menu item information.
     * @path /menuItems/{menuItemId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false; // TODO: Add role-based authorization
     * @deny (create) always
     * @deny (update) always
     * @deny (delete) always
     * @principle Requires role-based authorization (e.g., admin-only) for writes.
     */
    match /menuItems/{menuItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization
    }

    /**
     * @description Manages restaurant table information.
     * @path /tables/{tableId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false; // TODO: Add role-based authorization
     * @deny (create) always
     * @deny (update) always
     * @deny (delete) always
     * @principle Requires role-based authorization (e.g., admin-only) for writes.
     */
    match /tables/{tableId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization
    }
  }
}